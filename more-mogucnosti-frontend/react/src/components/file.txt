// src/components/UrediHotel.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';

import { getHotel, updateHotel, softDeleteHotel } from '../services/HotelService';
import { getSobeHotela, addSoba, updateSoba, softDeleteSoba } from '../services/SobaService';
import { getRezervacijaHotela } from '../services/RezervacijaService';
import { setGlavnaH, deleteSlikaH, addSlikaH } from '../services/SlikaHotelService';
import { setGlavnaS, deleteSlikaS, addSlikaS } from '../services/SlikaSobaService';

const UrediHotel = () => {
  const { idHotel } = useParams();
  const navigator = useNavigate();

  // ------- HOTEL / STATE -------
  const [hotel, setHotel] = useState({
    naziv: '',
    grad: '',
    adresa: '',
    parking: false,
    wifi: false,
    bazen: false,
    glavnaSlika: null,      // { id, putanja }
    sporedne: []            // [{ id, putanja }]
  });
  const [sobe, setSobe] = useState([]);
  const [rezervacije, setRezervacije] = useState([]);
  const [ucitavanje, setUcitavanje] = useState(true);

  // status poruke
  const [spremanje, setSpremanje] = useState(false);
  const [brisanje, setBrisanje] = useState(false);
  const [msg, setMsg] = useState(null); // {type: 'success'|'danger', text}

  // --- sobe: add / edit modali i forma ---
  const [showAdd, setShowAdd] = useState(false);
  const [showEdit, setShowEdit] = useState(false);
  const [editSobaId, setEditSobaId] = useState(null);
  const [formSoba, setFormSoba] = useState({
    kapacitet: '',
    cijenaNocenja: '',
    brojSobe: '',
    balkon: false,
    petFriendly: false,
  });

  // --- hotel slike forma ---
  const [formSlika, setFormSlika] = useState({ putanja: '', glavna: false });

  // --- MODAL ZA UREĐIVANJE SLIKA SOBE ---
  const [showImgManager, setShowImgManager] = useState(false);
  const [targetSobaId, setTargetSobaId] = useState(null);
  const [formSlikaS, setFormSlikaS] = useState({ putanja: '', glavna: false });

  // ------- HELPERS -------
  const mapHotel = (h) => {
    const glavna = h.glavnaSlika ? { id: h.glavnaSlika.id, putanja: h.glavnaSlika.putanja } : null;
    const sporedne = Array.isArray(h.sporedneSlike) ? h.sporedneSlike : [];
    return {
      naziv: h.naziv ?? '',
      grad: h.grad?.imeGrad ?? '',
      adresa: h.adresa ?? '',
      parking: !!h.parking,
      wifi: !!h.wifi,
      bazen: !!h.bazen,
      glavnaSlika: glavna,
      sporedne: [...sporedne],
    };
  };

  const refreshHotel = async () => {
    const res = await getHotel(idHotel);
    setHotel(mapHotel(res.data));
  };

  const refreshSobe = async () => {
    const res = await getSobeHotela(idHotel);
    setSobe(res.data ?? []);
  };

  const getSobaById = (id) => sobe.find(s => s.id === id);

  const formatDate = (d) => {
    if (!d) return '';
    const dt = typeof d === 'string' ? new Date(d) : d;
    return dt.toLocaleDateString('hr-HR');
  };

  const slikeHotela = useMemo(() => {
    const arr = [];
    if (hotel?.glavnaSlika?.putanja) arr.push({ ...hotel.glavnaSlika, glavna: true });
    if (Array.isArray(hotel?.sporedne)) arr.push(...hotel.sporedne.map(s => ({ ...s, glavna: false })));
    return arr;
  }, [hotel]);

  // ------- INIT FETCH -------
  useEffect(() => {
    (async () => {
      try {
        setUcitavanje(true);
        const res = await Promise.allSettled([
          getHotel(idHotel),
          getSobeHotela(idHotel),
          getRezervacijaHotela(idHotel)
        ]);
        const [hotelRes, sobeRes, rezRes] = res;

        if (hotelRes.status === 'fulfilled') setHotel(mapHotel(hotelRes.value.data));
        else setMsg({ type: 'danger', text: 'Greška pri učitavanju hotela.' });

        if (sobeRes.status === 'fulfilled') setSobe(sobeRes.value.data ?? []);
        else setSobe([]);

        if (rezRes.status === 'fulfilled') setRezervacije(rezRes.value.data ?? []);
        else setRezervacije([]);
      } catch (err) {
        console.error(err);
        setMsg({ type: 'danger', text: 'Neočekivana greška pri učitavanju.' });
      } finally {
        setUcitavanje(false);
      }
    })();
  }, [idHotel]);

  // ------- HOTEL: UPDATE / DELETE -------
  const handleChangeNaziv = (e) => setHotel(p => ({ ...p, naziv: e.target.value }));
  const handleToggle = (key) => (e) => setHotel(p => ({ ...p, [key]: e.target.checked }));

  const handleSpremiHotel = async (e) => {
    e.preventDefault();
    setMsg(null);
    setSpremanje(true);
    try {
      const payload = { naziv: hotel.naziv, parking: !!hotel.parking, wifi: !!hotel.wifi, bazen: !!hotel.bazen };
      const res = await updateHotel(idHotel, payload);
      if (res?.data) setHotel(mapHotel(res.data));
      setMsg({ type: 'success', text: 'Hotel je uspješno ažuriran.' });
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri ažuriranju hotela.' });
    } finally {
      setSpremanje(false);
    }
  };

  const handleObrisiHotel = async () => {
    if (!window.confirm('Jeste li sigurni da želite obrisati (soft delete) ovaj hotel?')) return;
    setMsg(null);
    setBrisanje(true);
    try {
      await softDeleteHotel(idHotel);
      setMsg({ type: 'success', text: 'Hotel je označen kao obrisan.' });
      // navigator('/admin/hoteli');
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri brisanju hotela.' });
    } finally {
      setBrisanje(false);
    }
  };

  // ------- HOTEL SLIKE: ADD / DELETE / SET GLAVNA -------
  const handleSlikaChange = (e) => {
    const { name, type, value, checked } = e.target;
    setFormSlika(p => ({ ...p, [name]: type === 'checkbox' ? checked : value }));
  };
  const handleAddSlika = async (e) => {
    e.preventDefault();
    setMsg(null);
    try {
      const dto = { putanja: formSlika.putanja.trim(), glavna: !!formSlika.glavna };
      if (!dto.putanja) { setMsg({ type: 'danger', text: 'Unesite putanju slike.' }); return; }
      const res = await addSlikaH(idHotel, dto);
      const created = res?.data;
      if (dto.glavna && created?.id) {
        try { await setGlavnaH(created.id); } catch (e) { console.warn('setGlavnaH nakon add nije uspio:', e); }
      }
      await refreshHotel();
      setFormSlika({ putanja: '', glavna: false });
      setMsg({ type: 'success', text: 'Slika hotela je dodana.' });
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri dodavanju slike hotela.' });
    }
  };
  const handleDeleteSlikaH = async (idSlika) => {
    if (!window.confirm('Obrisati ovu sliku hotela?')) return;
    setMsg(null);
    try {
      await deleteSlikaH(idSlika);
      await refreshHotel();
      setMsg({ type: 'success', text: 'Slika hotela je obrisana.' });
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri brisanju slike hotela.' });
    }
  };
  const handleSetGlavnaH = async (idSlika) => {
    setMsg(null);
    try {
      await setGlavnaH(idSlika);
      await refreshHotel();
      setMsg({ type: 'success', text: 'Postavljena glavna slika hotela.' });
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri postavljanju glavne slike hotela.' });
    }
  };

  // ------- SOBE: ADD / EDIT / DELETE -------
  const resetFormSoba = () => setFormSoba({ kapacitet: '', cijenaNocenja: '', brojSobe: '', balkon: false, petFriendly: false });
  const openAdd = () => { resetFormSoba(); setShowAdd(true); };
  const handleAddChange = (e) => {
    const { name, type, value, checked } = e.target;
    setFormSoba(p => ({ ...p, [name]: type === 'checkbox' ? checked : value }));
  };
  const handleAddSubmit = async (e) => {
    e.preventDefault();
    setMsg(null);
    try {
      const dto = {
        kapacitet: parseInt(formSoba.kapacitet, 10),
        cijenaNocenja: parseFloat(formSoba.cijenaNocenja),
        brojSobe: parseInt(formSoba.brojSobe, 10),
        balkon: !!formSoba.balkon,
        petFriendly: !!formSoba.petFriendly,
      };
      await addSoba(idHotel, dto);
      setShowAdd(false);
      setMsg({ type: 'success', text: 'Soba je dodana.' });
      await refreshSobe();
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri dodavanju sobe.' });
    }
  };

  const openEdit = (soba) => {
    setEditSobaId(soba.id);
    setFormSoba({
      kapacitet: String(soba.kapacitet ?? ''),
      cijenaNocenja: String(soba.cijenaNocenja ?? ''),
      brojSobe: String(soba.brojSobe ?? ''),
      balkon: !!soba.balkon,
      petFriendly: !!soba.petFriendly,
    });
    setShowEdit(true);
  };
  const handleEditChange = handleAddChange;
  const handleEditSubmit = async (e) => {
    e.preventDefault();
    setMsg(null);
    try {
      const dto = {
        kapacitet: parseInt(formSoba.kapacitet, 10),
        cijenaNocenja: parseFloat(formSoba.cijenaNocenja),
        brojSobe: parseInt(formSoba.brojSobe, 10),
        balkon: !!formSoba.balkon,
        petFriendly: !!formSoba.petFriendly,
      };
      await updateSoba(editSobaId, dto);
      setShowEdit(false);
      setMsg({ type: 'success', text: 'Soba je ažurirana.' });
      await refreshSobe();
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri ažuriranju sobe.' });
    }
  };

  const handleDeleteSoba = async (idSoba) => {
    if (!window.confirm('Obrisati (soft delete) ovu sobu?')) return;
    setMsg(null);
    try {
      await softDeleteSoba(idSoba);
      setMsg({ type: 'success', text: 'Soba je obrisana.' });
      await refreshSobe();
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri brisanju sobe.' });
    }
  };

  // ------- SOBE SLIKE: MODAL MANAGER -------
  const openImgManager = (sobaId) => {
    setTargetSobaId(sobaId);
    setFormSlikaS({ putanja: '', glavna: false });
    setShowImgManager(true);
  };

  const handleSlikaSChange = (e) => {
    const { name, type, value, checked } = e.target;
    setFormSlikaS(p => ({ ...p, [name]: type === 'checkbox' ? checked : value }));
  };

  const handleAddSlikaS = async (e) => {
    e.preventDefault();
    if (!targetSobaId) return;
    setMsg(null);
    try {
      const dto = { putanja: formSlikaS.putanja.trim(), glavna: !!formSlikaS.glavna };
      if (!dto.putanja) { setMsg({ type: 'danger', text: 'Unesite putanju slike.' }); return; }
      const res = await addSlikaS(targetSobaId, dto);
      const created = res?.data;
      if (dto.glavna && created?.id) {
        try { await setGlavnaS(created.id); } catch (e) { console.warn('setGlavnaS nakon add nije uspio:', e); }
      }
      await refreshSobe();
      setFormSlikaS({ putanja: '', glavna: false });
      setMsg({ type: 'success', text: 'Slika sobe je dodana.' });
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri dodavanju slike sobe.' });
    }
  };

  const handleDeleteSlikaS = async (idSlika) => {
    if (!window.confirm('Obrisati ovu sliku sobe?')) return;
    setMsg(null);
    try {
      await deleteSlikaS(idSlika);
      await refreshSobe();
      setMsg({ type: 'success', text: 'Slika sobe je obrisana.' });
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri brisanju slike sobe.' });
    }
  };

  const handleSetGlavnaS = async (idSlika) => {
    setMsg(null);
    try {
      await setGlavnaS(idSlika);
      await refreshSobe();
      setMsg({ type: 'success', text: 'Postavljena glavna slika sobe.' });
    } catch (err) {
      console.error(err);
      setMsg({ type: 'danger', text: 'Greška pri postavljanju glavne slike sobe.' });
    }
  };

  // ------- RENDER -------
  if (ucitavanje) return <div className="container py-5 mt-5">Učitavanje...</div>;

  // za modal slika sobe: složi listu slika za target sobu
  const targetSoba = targetSobaId ? getSobaById(targetSobaId) : null;
  const slikeTargetSobe = useMemo(() => {
    if (!targetSoba) return [];
    const arr = [];
    if (targetSoba.glavnaSlika) arr.push({ ...targetSoba.glavnaSlika, glavna: true });
    if (Array.isArray(targetSoba.sporedneSlike)) arr.push(...targetSoba.sporedneSlike.map(s => ({ ...s, glavna: false })));
    return arr;
  }, [targetSoba]);

  return (
    <div className="container py-4">
      {msg && <div className={`alert alert-${msg.type} mb-3`}>{msg.text}</div>}

      {/* Uredi hotel */}
      <form onSubmit={handleSpremiHotel} className="card shadow-sm border-0 mb-4" style={{ borderRadius: 12 }}>
        <div className="card-body">
          <div className="d-flex align-items-center justify-content-between mb-3">
            <h4 className="m-0">Uredi hotel</h4>
            <div className="d-flex gap-2">
              <button type="submit" className="btn btn-primary" disabled={spremanje}>{spremanje ? 'Spremam…' : 'Spremi promjene'}</button>
              <button type="button" className="btn btn-outline-danger" onClick={handleObrisiHotel} disabled={brisanje}>{brisanje ? 'Brišem…' : 'Obriši hotel'}</button>
            </div>
          </div>

          <div className="row g-3 align-items-end">
            <div className="col-md-6">
              <label className="form-label">Naziv</label>
              <input type="text" className="form-control" value={hotel.naziv} onChange={handleChangeNaziv} placeholder="Unesite naziv hotela" />
            </div>
            <div className="col-md-6">
              <div className="d-flex gap-4 flex-wrap">
                <div className="form-check">
                  <input id="chk-parking" className="form-check-input" type="checkbox" checked={!!hotel.parking} onChange={handleToggle('parking')} />
                  <label className="form-check-label" htmlFor="chk-parking">Parking</label>
                </div>
                <div className="form-check">
                  <input id="chk-wifi" className="form-check-input" type="checkbox" checked={!!hotel.wifi} onChange={handleToggle('wifi')} />
                  <label className="form-check-label" htmlFor="chk-wifi">WiFi</label>
                </div>
                <div className="form-check">
                  <input id="chk-bazen" className="form-check-input" type="checkbox" checked={!!hotel.bazen} onChange={handleToggle('bazen')} />
                  <label className="form-check-label" htmlFor="chk-bazen">Bazen</label>
                </div>
              </div>
            </div>
          </div>

          <div className="row g-3 mt-3">
            <div className="col-md-6">
              <label className="form-label">Grad</label>
              <input className="form-control" value={hotel.grad || ''} disabled />
            </div>
            <div className="col-md-6">
              <label className="form-label">Adresa</label>
              <input className="form-control" value={hotel.adresa || ''} disabled />
            </div>
          </div>
        </div>
      </form>

      {/* Slike hotela (admin) */}
      <div className="card shadow-sm border-0 mb-4" style={{ borderRadius: 12 }}>
        <div className="card-body">
          <h4 className="mb-3">Slike hotela (admin)</h4>

          <form className="row g-3 align-items-end mb-4" onSubmit={handleAddSlika}>
            <div className="col-md-8">
              <label className="form-label">Putanja</label>
              <input name="putanja" type="url" className="form-control" placeholder="https://..." value={formSlika.putanja} onChange={handleSlikaChange} required />
            </div>
            <div className="col-md-2 d-flex align-items-center">
              <div className="form-check mt-4">
                <input id="slika-glavna" name="glavna" type="checkbox" className="form-check-input" checked={!!formSlika.glavna} onChange={handleSlikaChange} />
                <label htmlFor="slika-glavna" className="form-check-label">Glavna</label>
              </div>
            </div>
            <div className="col-md-2">
              <button type="submit" className="btn btn-primary w-100 mt-4">Dodaj sliku</button>
            </div>
          </form>

          {slikeHotela.length === 0 ? (
            <div className="text-muted">Nema slika.</div>
          ) : (
            <div className="row g-3">
              {slikeHotela.map((s, i) => (
                <div className="col-md-3" key={s.id ?? i}>
                  <div className="card border-0 shadow-sm h-100" style={{ borderRadius: 12, overflow: 'hidden' }}>
                    <img src={s.putanja} alt={`Slika ${i + 1}`} style={{ height: 160, width: '100%', objectFit: 'cover' }} />
                    <div className="card-body d-flex flex-column">
                      <span className={`badge ${s.glavna ? 'bg-success' : 'bg-secondary'} align-self-start mb-2`}>
                        {s.glavna ? 'Glavna' : 'Sporedna'}
                      </span>

                      <div className="mt-auto d-flex gap-2">
                        {!s.glavna && (
                          <button type="button" className="btn btn-outline-primary btn-sm" onClick={() => handleSetGlavnaH(s.id)}>
                            Postavi kao glavnu
                          </button>
                        )}
                        <button type="button" className="btn btn-outline-danger btn-sm" onClick={() => handleDeleteSlikaH(s.id)}>
                          Obriši
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Carousel + info (opcionalno) */}
      <div className="card shadow-sm border-0 mb-4" style={{ borderRadius: 12, overflow: 'hidden' }}>
        {slikeHotela.length > 0 && (
          <div id="adminHotelCarousel" className="carousel slide" data-bs-ride="carousel">
            <div className="carousel-inner">
              {slikeHotela.map((s, i) => (
                <div className={`carousel-item ${i === 0 ? 'active' : ''}`} key={s.id ?? i}>
                  <img src={s.putanja} alt={`Slika ${i + 1}`} className="d-block w-100" style={{ height: 420, objectFit: 'cover' }} />
                </div>
              ))}
            </div>
            {slikeHotela.length > 1 && (
              <>
                <button className="carousel-control-prev" type="button" data-bs-target="#adminHotelCarousel" data-bs-slide="prev">
                  <span className="carousel-control-prev-icon" aria-hidden="true"></span>
                  <span className="visually-hidden">Previous</span>
                </button>
                <button className="carousel-control-next" type="button" data-bs-target="#adminHotelCarousel" data-bs-slide="next">
                  <span className="carousel-control-next-icon" aria-hidden="true"></span>
                  <span className="visually-hidden">Next</span>
                </button>
              </>
            )}
          </div>
        )}

        <div className="card-body">
          <div className="row text-center fs-6 fw-medium">
            <div className="col"><span className="text-muted"><strong>Grad:</strong> {hotel.grad || '—'}</span></div>
            <div className="col"><span className="text-muted"><strong>Adresa:</strong> {hotel.adresa || '—'}</span></div>
            <div className="col"><span className="text-muted"><strong>Parking:</strong> {hotel.parking ? <i className="fas fa-check text-success" /> : <i className="fas fa-times text-danger" />}</span></div>
            <div className="col"><span className="text-muted"><strong>WiFi:</strong> {hotel.wifi ? <i className="fas fa-check text-success" /> : <i className="fas fa-times text-danger" />}</span></div>
            <div className="col"><span className="text-muted"><strong>Bazen:</strong> {hotel.bazen ? <i className="fas fa-check text-success" /> : <i className="fas fa-times text-danger" />}</span></div>
          </div>
        </div>
      </div>

      {/* SOBE */}
      <div className="card shadow-sm border-0 mb-4" style={{ borderRadius: 12 }}>
        <div className="card-body">
          <div className="d-flex align-items-center justify-content-between mb-3">
            <h4 className="m-0">Sobe</h4>
            <button className="btn btn-primary" onClick={openAdd}>Dodaj sobu</button>
          </div>

          {(!sobe || sobe.length === 0) ? (
            <div className="text-muted">Nema soba.</div>
          ) : (
            <div className="row g-4">
              {sobe.map((soba) => (
                <div key={soba.id} className="col-md-4">
                  <div className="card h-100 border-0 shadow-sm" style={{ borderRadius: 12, overflow: 'hidden' }}>
                    {soba.glavnaSlika?.putanja && (
                      <img src={soba.glavnaSlika.putanja} alt="Glavna slika sobe" className="card-img-top" style={{ height: 200, objectFit: 'cover' }} />
                    )}
                    <div className="card-body d-flex flex-column">
                      <div className="d-flex justify-content-between align-items-center mb-2">
                        <h5 className="card-title m-0">Soba {soba.brojSobe}</h5>
                        <span className={`badge ${soba.aktivno ? 'bg-success' : 'bg-secondary'}`}>{soba.aktivno ? 'Aktivna' : 'Neaktivna'}</span>
                      </div>
                      <ul className="list-unstyled mb-3">
                        <li><strong>Kapacitet:</strong> {soba.kapacitet}</li>
                        <li><strong>Cijena / noć:</strong> {soba.cijenaNocenja} €</li>
                        <li><strong>Balkon:</strong> {soba.balkon ? 'Da' : 'Ne'}</li>
                        <li><strong>Pet friendly:</strong> {soba.petFriendly ? 'Da' : 'Ne'}</li>
                      </ul>

                      <div className="mt-auto d-flex gap-2">
                        <button className="btn btn-outline-secondary btn-sm" onClick={() => openImgManager(soba.id)}>Uredi slike</button>
                        <button className="btn btn-outline-primary btn-sm" onClick={() => openEdit(soba)}>Uredi</button>
                        <button className="btn btn-outline-danger btn-sm" onClick={() => handleDeleteSoba(soba.id)}>Obriši</button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* REZERVACIJE */}
      <div className="card shadow-sm border-0" style={{ borderRadius: 12 }}>
        <div className="card-body">
          <h4 className="mb-3">Rezervacije</h4>

          {(!rezervacije || rezervacije.length === 0) ? (
            <div className="text-muted">Nema rezervacija.</div>
          ) : (
            <div className="table-responsive">
              <table className="table align-middle">
                <thead>
                  <tr>
                    <th>#</th>
                    <th>Soba</th>
                    <th>Korisnik</th>
                    <th>Broj osoba</th>
                    <th>Od</th>
                    <th>Do</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody>
                  {rezervacije.map((r, idx) => (
                    <tr key={r.id ?? idx}>
                      <td>{r.id}</td>
                      <td>{r.soba?.brojSobe ?? '—'}</td>
                      <td>{r.korisnik ? `${r.korisnik.ime ?? ''} ${r.korisnik.prezime ?? ''}`.trim() : '—'}</td>
                      <td>{r.brojOsoba ?? '—'}</td>
                      <td>{formatDate(r.datumPocetak)}</td>
                      <td>{formatDate(r.datumKraj)}</td>
                      <td><span className="badge bg-primary">{r.status ?? '—'}</span></td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* -------- MODALS -------- */}

      {/* ADD SOBA */}
      {showAdd && (
        <>
          <div className="modal-backdrop fade show" style={{ zIndex: 1050 }} onClick={() => setShowAdd(false)} />
          <div className="modal fade show d-block" tabIndex="-1" role="dialog" aria-modal="true" style={{ zIndex: 1060 }}>
            <div className="modal-dialog" onClick={(e) => e.stopPropagation()}>
              <div className="modal-content">
                <form onSubmit={handleAddSubmit}>
                  <div className="modal-header">
                    <h5 className="modal-title">Dodaj sobu</h5>
                    <button type="button" className="btn-close" onClick={() => setShowAdd(false)} />
                  </div>
                  <div className="modal-body">
                    <div className="row g-3">
                      <div className="col-6">
                        <label className="form-label">Broj sobe</label>
                        <input name="brojSobe" type="number" className="form-control" value={formSoba.brojSobe} onChange={handleAddChange} required />
                      </div>
                      <div className="col-6">
                        <label className="form-label">Kapacitet</label>
                        <input name="kapacitet" type="number" min={1} className="form-control" value={formSoba.kapacitet} onChange={handleAddChange} required />
                      </div>
                      <div className="col-6">
                        <label className="form-label">Cijena / noć (€)</label>
                        <input name="cijenaNocenja" type="number" step="0.01" min={0} className="form-control" value={formSoba.cijenaNocenja} onChange={handleAddChange} required />
                      </div>
                      <div className="col-6 d-flex align-items-center gap-4">
                        <div className="form-check">
                          <input id="add-balkon" name="balkon" type="checkbox" className="form-check-input" checked={!!formSoba.balkon} onChange={handleAddChange} />
                          <label className="form-check-label" htmlFor="add-balkon">Balkon</label>
                        </div>
                        <div className="form-check">
                          <input id="add-pet" name="petFriendly" type="checkbox" className="form-check-input" checked={!!formSoba.petFriendly} onChange={handleAddChange} />
                          <label className="form-check-label" htmlFor="add-pet">Pet friendly</label>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="modal-footer">
                    <button type="button" className="btn btn-outline-secondary" onClick={() => setShowAdd(false)}>Odustani</button>
                    <button type="submit" className="btn btn-primary">Spremi</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </>
      )}

      {/* EDIT SOBA */}
      {showEdit && (
        <>
          <div className="modal-backdrop fade show" style={{ zIndex: 1050 }} onClick={() => setShowEdit(false)} />
          <div className="modal fade show d-block" tabIndex="-1" role="dialog" aria-modal="true" style={{ zIndex: 1060 }}>
            <div className="modal-dialog" onClick={(e) => e.stopPropagation()}>
              <div className="modal-content">
                <form onSubmit={handleEditSubmit}>
                  <div className="modal-header">
                    <h5 className="modal-title">Uredi sobu #{editSobaId}</h5>
                    <button type="button" className="btn-close" onClick={() => setShowEdit(false)} />
                  </div>
                  <div className="modal-body">
                    <div className="row g-3">
                      <div className="col-6">
                        <label className="form-label">Broj sobe</label>
                        <input name="brojSobe" type="number" className="form-control" value={formSoba.brojSobe} onChange={handleEditChange} required />
                      </div>
                      <div className="col-6">
                        <label className="form-label">Kapacitet</label>
                        <input name="kapacitet" type="number" min={1} className="form-control" value={formSoba.kapacitet} onChange={handleEditChange} required />
                      </div>
                      <div className="col-6">
                        <label className="form-label">Cijena / noć (€)</label>
                        <input name="cijenaNocenja" type="number" step="0.01" min={0} className="form-control" value={formSoba.cijenaNocenja} onChange={handleEditChange} required />
                      </div>
                      <div className="col-6 d-flex align-items-center gap-4">
                        <div className="form-check">
                          <input id="edit-balkon" name="balkon" type="checkbox" className="form-check-input" checked={!!formSoba.balkon} onChange={handleEditChange} />
                          <label className="form-check-label" htmlFor="edit-balkon">Balkon</label>
                        </div>
                        <div className="form-check">
                          <input id="edit-pet" name="petFriendly" type="checkbox" className="form-check-input" checked={!!formSoba.petFriendly} onChange={handleEditChange} />
                          <label className="form-check-label" htmlFor="edit-pet">Pet friendly</label>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="modal-footer">
                    <button type="button" className="btn btn-outline-secondary" onClick={() => setShowEdit(false)}>Odustani</button>
                    <button type="submit" className="btn btn-primary">Spremi</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </>
      )}

      {/* UREDI SLIKE SOBE — MODAL */}
      {showImgManager && targetSoba && (
        <>
          <div className="modal-backdrop fade show" style={{ zIndex: 1050 }} onClick={() => setShowImgManager(false)} />
          <div className="modal fade show d-block" tabIndex="-1" role="dialog" aria-modal="true" style={{ zIndex: 1060 }}>
            <div className="modal-dialog modal-lg" onClick={(e) => e.stopPropagation()}>
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title">
                    Uredi slike — Soba {targetSoba.brojSobe} (ID #{targetSoba.id})
                  </h5>
                  <button type="button" className="btn-close" onClick={() => setShowImgManager(false)} />
                </div>

                <div className="modal-body">
                  {/* Forma za dodavanje slike sobe */}
                  <form className="row g-3 align-items-end mb-3" onSubmit={handleAddSlikaS}>
                    <div className="col-md-8">
                      <label className="form-label">Putanja slike</label>
                      <input
                        name="putanja"
                        type="url"
                        className="form-control"
                        placeholder="https://..."
                        value={formSlikaS.putanja}
                        onChange={handleSlikaSChange}
                        required
                      />
                    </div>
                    <div className="col-md-2 d-flex align-items-center">
                      <div className="form-check mt-4">
                        <input
                          id="soba-slika-glavna"
                          name="glavna"
                          type="checkbox"
                          className="form-check-input"
                          checked={!!formSlikaS.glavna}
                          onChange={handleSlikaSChange}
                        />
                        <label htmlFor="soba-slika-glavna" className="form-check-label">Glavna</label>
                      </div>
                    </div>
                    <div className="col-md-2">
                      <button type="submit" className="btn btn-primary w-100 mt-4">Dodaj</button>
                    </div>
                  </form>

                  {/* Grid postojećih slika sobe */}
                  {slikeTargetSobe.length === 0 ? (
                    <div className="text-muted">Soba trenutno nema slika.</div>
                  ) : (
                    <div className="row g-3">
                      {slikeTargetSobe.map((sl, i) => (
                        <div className="col-md-4" key={sl.id ?? i}>
                          <div className="card h-100" style={{ borderRadius: 12, overflow: 'hidden' }}>
                            <img src={sl.putanja} alt={`Slika ${i + 1}`} style={{ height: 160, width: '100%', objectFit: 'cover' }} />
                            <div className="card-body d-flex flex-column">
                              <span className={`badge ${sl.glavna ? 'bg-success' : 'bg-secondary'} align-self-start mb-2`}>
                                {sl.glavna ? 'Glavna' : 'Sporedna'}
                              </span>
                              <div className="mt-auto d-flex gap-2">
                                {!sl.glavna && (
                                  <button
                                    type="button"
                                    className="btn btn-outline-primary btn-sm"
                                    onClick={() => handleSetGlavnaS(sl.id)}
                                  >
                                    Postavi kao glavnu
                                  </button>
                                )}
                                <button
                                  type="button"
                                  className="btn btn-outline-danger btn-sm"
                                  onClick={() => handleDeleteSlikaS(sl.id)}
                                >
                                  Obriši
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                <div className="modal-footer">
                  <button type="button" className="btn btn-outline-secondary" onClick={() => setShowImgManager(false)}>Zatvori</button>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default UrediHotel;
